# Generated by TRAE IDE

import asyncio
import json
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client

async def main():
    # Server parameters - this will start your mcp_server.py
    server_params = StdioServerParameters(
        command="uv",
        args=["run", "mcp_server.py"],
        env=None
    )
    
    async with stdio_client(server_params) as (read, write):
        async with ClientSession(read, write) as session:
            # Initialize the connection
            await session.initialize()
            
            print("Connected to MCP server!")
            print("Available tools:")
            
            # List available tools
            tools = await session.list_tools()
            for tool in tools.tools:
                print(f"- {tool.name}: {tool.description}")
            
            print("\nAvailable resources:")
            
            # List available resources
            resources = await session.list_resources()
            for resource in resources.resources:
                print(f"- {resource.uri}: {resource.name} ({resource.mimeType})")
            
            # NEW: List available prompts
            print("\nAvailable prompts:")
            prompts = await session.list_prompts()
            for prompt in prompts.prompts:
                print(f"- {prompt.name}: {prompt.description}")
            
            print("\n" + "="*50 + "\n")
            
            # Example 1: Use resource to list all documents
            print("Example 1: Using resource to list all documents")
            result = await session.read_resource("docs://documents")
            print(f"Available documents: {result.contents[0].text}")
            
            print("\n" + "-"*30 + "\n")
            
            # Example 2: Use resource to read a specific document
            print("Example 2: Using resource to read deposition.md")
            result = await session.read_resource("docs://documents/deposition.md")
            print(f"Document content: {result.contents[0].text}")
            
            print("\n" + "-"*30 + "\n")
            
            # Example 3: Use resource to read another document
            print("Example 3: Using resource to read report.pdf")
            result = await session.read_resource("docs://documents/report.pdf")
            print(f"Document content: {result.contents[0].text}")
            
            print("\n" + "-"*30 + "\n")
            
            # Example 4: Compare tool vs resource approach
            print("Example 4: Comparing tool vs resource approach for reading documents")
            
            # Using tool
            print("Using tool approach:")
            tool_result = await session.call_tool(
                "document_reader",
                arguments={"document_name": "plan.md"}
            )
            print(f"Tool result: {tool_result.content[0].text}")
            
            # Using resource
            print("\nUsing resource approach:")
            resource_result = await session.read_resource("docs://documents/plan.md")
            print(f"Resource result: {resource_result.contents[0].text}")
            
            print("\n" + "-"*30 + "\n")
            
            # Example 5: Add two numbers (tool example)
            print("Example 5: Adding 15 + 25 using tool")
            result = await session.call_tool(
                "add_numbers",
                arguments={"number1": 15, "number2": 25}
            )
            print(f"Result: {result.content[0].text}")
            
            print("\n" + "-"*30 + "\n")
            
            # Example 6: Get stock price (tool example)
            print("Example 6: Getting AAPL stock price using tool")
            result = await session.call_tool(
                "get_stock_price",
                arguments={"ticker": "AAPL"}
            )
            print(f"Result: {result.content[0].text}")
            
            print("\n" + "-"*30 + "\n")
            
            # Example 7: Write to a document (tool example)
            print("Example 7: Writing to a new document using tool")
            result = await session.call_tool(
                "document_writer",
                arguments={
                    "document_name": "test.md",
                    "content": "This is a test document created by the MCP client."
                }
            )
            print(f"Result: {result.content[0].text}")
            
            # Example 8: Read the document we just created using resource
            print("\nExample 8: Reading the document we just created using resource")
            try:
                result = await session.read_resource("docs://documents/test.md")
                print(f"Resource result: {result.contents[0].text}")
            except Exception as e:
                print(f"Resource read failed: {e}")
                print("Note: The resource might not reflect dynamically added documents")
            
            print("\n" + "-"*30 + "\n")
            
            # NEW: Example 9: Use the format prompt
            print("Example 9: Using the format prompt")
            try:
                prompt_result = await session.get_prompt(
                    "format_doc_prompt",
                    arguments={"doc_id": "deposition.md"}
                )
                print(f"Format prompt result:")
                for message in prompt_result.messages:
                    print(f"- Role: {message.role}")
                    print(f"- Content: {message.content.text}")
            except Exception as e:
                print(f"Prompt failed: {e}")

if __name__ == "__main__":
    asyncio.run(main())